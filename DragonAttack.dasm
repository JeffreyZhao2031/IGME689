 processor 6502

;=========================================================
; For this file, we're going to use the CLEAN_START macro.
; So remember to add the macro.h and vcs.h so you're ready.
;=========================================================
    include "vcs.h"
    include "macro.h"

;=========================================================
; We'll use an uninitialized segment at memory slot $80 
; for var declaration. We have memory for variables $80 to $FF 
; to work with, minus a few at the end if we use the stack.
;=========================================================

    seg.u Variables
    org $80
P0XPos byte        ; This will primarily be used for sprite manipulation.
P1XPos byte        ; This will primarily be used for sprite manipulation.
; You might wonder about the "byte" there. Just imagine it's saying, "put this where it can go."
; It may become a problem if you start declaring tons of variables.

;=========================================================
; Start our ROM code segment starting at $F000 as always.
;=========================================================
    seg Code
    org $F000

Reset:
    CLEAN_START    ; Clear everything out. 

    ldx #$88       ; Set the background to a light blue 
    stx COLUBK

    ldx #$D0       ; and we need some grass.
    stx COLUPF

;=========================================================
; Here, we'll start setting up values for our variables
;=========================================================
    lda #10
    sta P0XPos     ; initialize player X coordinate
    
    lda #20
    sta P1XPos     ; initialize player X coordinate

;=========================================================
; YAY! It's making our kernal happen.
;=========================================================
StartFrame:
    lda #2
    sta VBLANK     ; turn VBLANK on
    sta VSYNC      ; turn VSYNC on

;=========================================================
; 3 vertical lines of VSYNC (Can also use bne method)
;=========================================================
    REPEAT 3
        sta WSYNC  ; first three VSYNC scanlines
    REPEND
    lda #0
    sta VSYNC      ; turn VSYNC off

;=========================================================
; We're in VSYNC and can burn some cpu cycles. 
; So let's go with setting up our register for player movement.
; Note here that we're basically setting up initial position.
; We can also set up brute force and fine movement. 
;=========================================================
    lda P0XPos     ; load register A with desired X position
    and #$7F       ; AND position with $7F to fix range
    lda P1XPos     ; load register A with desired X position
    and #$7F       ; AND position with $7F to fix range
    sta WSYNC      ; wait for next scanline
    sta HMCLR      ; clear old horizontal position values

    sec            ; set carry flag before subtraction
DivideLoop:
    sbc #15        ; subtract 15 from the accumulator
    bcs DivideLoop ; loop while carry flag is still set

    eor #7         ; adjust the remainder in A between -8 and 7
    asl            ; shift left by 4, as HMP0 uses only 4 bits
    asl
    asl
    asl
    sta HMP0       ; set fine position
    sta RESP0      ; reset 15-step brute position
    sta HMP1       ; set fine position
    sta RESP1      ; reset 15-step brute position
    sta WSYNC      ; wait for next scanline
    sta HMOVE      ; apply the fine position offset

;=========================================================
; Let the TIA output the remaining 35 lines of VBLANK (37 - 2)
; You may wonder why -2 but check the two WSYNCs above.
;=========================================================
    REPEAT 35
        sta WSYNC
    REPEND
    lda #0
    sta VBLANK     ; turn VBLANK off

;=========================================================
; Draw the 192 visible scanlines.
; We have to adjust here for our sky and our grass. 
; You can adjust if you want. This will adjust where 
; the player sprite is given the initial declaration 
; of how many scanlines we tell it to wait for.
;=========================================================
    REPEAT 160
        sta WSYNC  ; wait for 160 empty scanlines
    REPEND

    ldy #17         ; counter to draw 17 rows of player0 bitmap
DrawBitmap:
    lda P0Bitmap,Y ; load player bitmap slice of data
    sta GRP0       ; set graphics for player 0 slice

    lda P0Color,Y  ; load player color from lookup table
    sta COLUP0     ; set color for player 0 slice
    
    lda P1Bitmap,Y ; load player bitmap slice of data
    sta GRP1       ; set graphics for player 0 slice

    lda P1Color,Y  ; load player color from lookup table
    sta COLUP1     ; set color for player 0 slice

    sta WSYNC      ; wait for next scanline

    dey
    bne DrawBitmap ; repeat next scanline until finished

    lda #0
    sta GRP0       ; disable P0 bitmap graphics
    sta GRP1       ; disable P0 bitmap graphics

    lda #$FF       ; enable grass playfield
    sta PF0
    sta PF1
    sta PF2

    REPEAT 15
        sta WSYNC  ; wait for remaining 15 empty scanlines
    REPEND

    lda #0         ; disable grass playfield
    sta PF0
    sta PF1
    sta PF2

;=========================================================
; Output 30 more VBLANK overscan lines to complete our kernal
;=========================================================
Overscan:
    lda #2
    sta VBLANK     ; turn VBLANK on again for overscan
    REPEAT 30
        sta WSYNC
    REPEND

;=========================================================
; Joystick input test for P0 up/down/left/right.
; Remember here that this 8 bits is: 
; 0000 < P0 || 0000 < P1. 
; So look at this. Here, we're INCREMENTING when going
; in a positive direction. We're DECREMENTING when going
; in a negative direction. We're also only using bits 0-3 
; so this is p0 only.
;=========================================================
CheckP0Up:
    lda #%00010000	; right > left > down > up (p0). Repeat for p1.
    bit SWCHA		; So we send this to the PIA (Peripheral Interface Adaptor) register.
    bne CheckP0Down	
    inc P0XPos
    
; BIT here is interesting. It basically tests the bits of SWCHA with the bits of the A register.
; It's like doing an AND operation which is: AND (AND Accumulator with Memory). 
; AND performs a bitwise AND operation on the accumulator register (A) and an operand. 
; What does this mean? Well, if we look at SWCHA, we can see that it expects 11111111 as it's 
; Mode of knowing what direction it is going on. What BIT does then is basically set: 
; 11111111 against 00100000 resulting in >> 00100000 or MOVE UP. The reason we use BIT over AND
; is because we want to set the flags that AND does: N/Z without storing the value.

CheckP0Down:
    lda #%00100000      ; Note that this is inverse to how it is expected. This is mostly the AND thing. 
    bit SWCHA
    bne CheckP0Left
    dec P0XPos

CheckP0Left:
    lda #%01000000
    bit SWCHA
    bne CheckP0Right
    dec P0XPos

CheckP0Right:
    lda #%10000000
    bit SWCHA
    bne NoInput
    inc P0XPos
    
; P1 Movement
CheckP1Up:
    lda #%00000001	; right > left > down > up (p0). Repeat for p1.
    bit SWCHA		; So we send this to the PIA (Peripheral Interface Adaptor) register.
    bne CheckP1Down	
    inc P1XPos

CheckP1Down:
    lda #%00000010      ; Note that this is inverse to how it is expected. This is mostly the AND thing. 
    bit SWCHA
    bne CheckP1Left
    dec P1XPos

CheckP1Left:
    lda #%00000100
    bit SWCHA
    bne CheckP1Right
    dec P1XPos

CheckP1Right:
    lda #%00001000
    bit SWCHA
    bne NoInput
    inc P1XPos
    
; So we basically constantly checking to see if something is different.
; At some point a player will move the stick and if so, what is happening?

NoInput:
    ; fallback when no input was performed

;=========================================================
; Loop to next frame
;=========================================================
    jmp StartFrame

;=========================================================
; Here are the graphic tables for our sprites. 
; These are usually separated, pixels vs sprites.
;=========================================================
P0Bitmap:
    byte #%00000000
    byte #%00010100
    byte #%00010100
    byte #%00010100
    byte #%00010100
    byte #%00010100
    byte #%00011100
    byte #%01011101
    byte #%01011101
    byte #%01011101
    byte #%01011101
    byte #%01111111
    byte #%00111110
    byte #%00010000
    byte #%00011100
    byte #%00011100
    byte #%00011100

;=========================================================
; Lookup table for the player colors
;=========================================================
P0Color:
    byte #$00
    byte #$F0
    byte #$72
    byte #$F2
    byte #$F2
    byte #$F2
    byte #$F2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$3E
    byte #$3E
    byte #$3E
    byte #$24

P1Bitmap:
    byte #%00000000
    byte #%00010100
    byte #%00010100
    byte #%00010100
    byte #%00010100
    byte #%00010100
    byte #%00011100
    byte #%01011101
    byte #%01011101
    byte #%01011101
    byte #%01011101
    byte #%01111111
    byte #%00111110
    byte #%00010000
    byte #%00011100
    byte #%00011100
    byte #%00011100

;=========================================================
; Lookup table for the player colors
;=========================================================
P1Color:
    byte #$00
    byte #$F6
    byte #$F2
    byte #$F2
    byte #$F2
    byte #$F2
    byte #$F2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$C2
    byte #$3E
    byte #$3E
    byte #$3E
    byte #$00
;=========================================================
; Complete ROM size
;=========================================================
    org $FFFC
    word Reset
    word Reset